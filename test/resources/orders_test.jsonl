{"name": "illegal_table", "sql": "SELECT * FROM users", "errors": ["Table users is not allowed"]}
{"name": "two_illegal_tables", "sql": "SELECT col1 FROM users AS u1 JOIN products AS p1", "errors": ["Table users is not allowed", "Table products is not allowed"]}
{"name": "select_no_legal_cols", "sql": "SELECT col1, col2 FROM orders WHERE id = 123", "errors": ["Column col1 is not allowed. Column removed from SELECT clause", "Column col2 is not allowed. Column removed from SELECT clause", "No legal elements in SELECT clause"]}
{"name": "select_star", "sql": "SELECT * FROM orders WHERE id = 123", "errors": ["SELECT * is not allowed"], "fix": "SELECT id, product_name, account_id, day FROM orders WHERE id = 123", "data": [[123, "product1", 123, "2025-01-01"]]}
{"name": "select_star_with_column", "sql": "SELECT product_name, * FROM orders WHERE id = 123", "errors": ["SELECT * is not allowed"], "fix": "SELECT product_name, id, product_name, account_id, day FROM orders WHERE id = 123", "data": [["product1", 123, "product1", 123, "2025-01-01"]]}
{"name": "select_star_with_column_and_alias", "sql": "SELECT product_name AS \"p_n\", * FROM orders WHERE id = 123", "errors": ["SELECT * is not allowed"], "fix": "SELECT product_name AS \"p_n\", id, product_name, account_id, day FROM orders WHERE id = 123", "data": [["product1", 123, "product1", 123, "2025-01-01"]]}
{"name": "two_cols", "sql": "SELECT id, product_name FROM orders WHERE id = 123", "errors": [], "data": [[123, "product1"]]}
{"name": "quote_and_alias", "sql": "SELECT \"id\" AS my_id FROM orders WHERE id = 123", "errors": [], "data": [[123]]}
{"name": "sql_with_group_by_and_order_by", "sql": "SELECT id FROM orders GROUP BY id ORDER BY id", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123 GROUP BY id ORDER BY id", "data": [[123]]}
{"name": "sql_with_where_and_group_by_and_order_by", "sql": "SELECT id FROM orders WHERE product_name = '' GROUP BY id ORDER BY id", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (product_name = '') AND id = 123 GROUP BY id ORDER BY id"}
{"name": "col_expression", "sql": "SELECT col + 1 FROM orders WHERE id = 123", "errors": ["Column col is not allowed. Column removed from SELECT clause", "No legal elements in SELECT clause"]}
{"name": "select_illegal_col", "sql": "SELECT col, id FROM orders WHERE id = 123", "errors": ["Column col is not allowed. Column removed from SELECT clause"], "fix": "SELECT id FROM orders WHERE id = 123"}
{"name": "missing_restriction", "sql": "SELECT id FROM orders", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123"}
{"name": "wrong_restriction", "sql": "SELECT id FROM orders WHERE id = 234", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (id = 234) AND id = 123"}
{"name": "table_and_database", "sql": "SELECT id FROM orders_db.orders AS o WHERE id = 123", "errors": [], "data": [[123]]}
{"name": "function_call", "sql": "SELECT COUNT(DISTINCT id) FROM orders_db.orders AS o WHERE id = 123", "errors": [], "data": [[1]]}
{"name": "function_call_illegal_col", "sql": "SELECT COUNT(DISTINCT col) FROM orders_db.orders AS o WHERE id = 123", "errors": ["Column col is not allowed. Column removed from SELECT clause", "No legal elements in SELECT clause"]}
{"name": "table_prefix", "sql": "SELECT o.id FROM orders AS o WHERE id = 123", "errors": [], "data": [[123]]}
{"name": "table_and_db_prefix", "sql": "SELECT orders_db.orders.id FROM orders_db.orders WHERE orders_db.orders.id = 123", "errors": [], "data": [[123]]}
{"name": "table_alias", "sql": "SELECT a.id FROM orders_db.orders AS a WHERE a.id = 123", "errors": [], "data": [[123]]}
{"name": "table_alias_illegal_col", "sql": "SELECT a.id, a.status FROM orders AS a WHERE a.id = 123", "errors": ["Column status is not allowed. Column removed from SELECT clause"], "fix": "SELECT a.id FROM orders AS a WHERE a.id = 123", "data": [[123]]}
{"name": "bad_restriction", "sql": "SELECT id FROM orders WHERE id = 123 OR id = 234", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (id = 123 OR id = 234) AND id = 123"}
{"name": "bracketed", "sql": "SELECT id FROM orders WHERE (id = 123)", "errors": [], "data": [[123]]}
{"name": "double_bracketed", "sql": "SELECT id FROM orders WHERE ((id = 123))", "errors": [], "data": [[123]]}
{"name": "static_exp", "sql": "SELECT id FROM orders WHERE id = 123 OR 1 = 1", "errors": ["Static expression is not allowed: 1 = 1"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "only_static_exp", "sql": "SELECT id FROM orders WHERE 1 = 1", "errors": ["Static expression is not allowed: 1 = 1", "Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "only_static_exp_false", "sql": "SELECT id FROM orders WHERE 1 = 0", "errors": ["Static expression is not allowed: 1 = 0", "Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (FALSE) AND id = 123", "data": []}
{"name": "static_exp_paren", "sql": "SELECT id FROM orders WHERE id = 123 OR (1 = 1)", "errors": ["Static expression is not allowed: 1 = 1"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "two_static_exps", "sql": "SELECT id FROM orders WHERE id = 123 OR (1 = 1) OR (2 = 2)", "errors": ["Static expression is not allowed: 1 = 1", "Static expression is not allowed: 2 = 2"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "static_exp_with_missing_restriction", "sql": "SELECT id, name FROM orders WHERE 1 = 1", "errors": ["Column name is not allowed. Column removed from SELECT clause", "Static expression is not allowed: 1 = 1", "Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "nested_static_exp", "sql": "SELECT id FROM orders WHERE id = 123 OR (id = 1 OR TRUE)", "errors": ["Static expression is not allowed: TRUE", "Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (id = 1 OR id = 123) AND id = 123", "data": [[123]]}
{"name": "nested_static_exp2", "sql": "SELECT id FROM orders WHERE id = 123 AND (product_name = 'product1' OR (TRUE))", "errors": ["Static expression is not allowed: TRUE"], "fix": "SELECT id FROM orders WHERE id = 123 AND product_name = 'product1'", "data": [[123]]}
{"name": "multiple_brackets_exp", "sql": "SELECT id FROM orders WHERE (( ( (id = 123))))", "errors": [], "data": [[123]]}
{"name": "with_clause", "sql": "WITH data AS (SELECT id FROM orders WHERE id = 123) SELECT id FROM data", "errors": [], "data": [[123]]}
{"name": "nested_with_clause", "sql": "WITH data AS (WITH sub_data AS (SELECT id FROM orders) SELECT id FROM sub_data) SELECT id FROM data", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "WITH data AS (WITH sub_data AS (SELECT id FROM orders WHERE id = 123) SELECT id FROM sub_data) SELECT id FROM data"}
{"name": "nested_with_clause", "sql": "WITH data AS (WITH sub_data AS (SELECT id FROM orders WHERE id = 123) SELECT id FROM sub_data) SELECT id FROM data", "errors": [], "data": [[123]]}
{"name": "with_clause_missing_restriction", "sql": "WITH data AS (SELECT id FROM orders) SELECT id FROM data", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "WITH data AS (SELECT id FROM orders WHERE id = 123) SELECT id FROM data"}
{"name": "lowercase", "sql": "with data as (select id from orders as o where id = 123) select id from data", "errors": [], "data": [[123]]}
{"name": "sub_select", "sql": "SELECT id, sub_select.col FROM orders CROSS JOIN (SELECT 1 AS col) AS sub_select WHERE id = 123", "errors": [], "data": [[123, 1]]}
{"name": "sub_select_expression", "sql": "SELECT id, 1 + (1 + sub_select.col) FROM orders CROSS JOIN (SELECT 1 AS col) AS sub_select WHERE id = 123", "errors": [], "data": [[123, 3]]}
{"name": "sub_select_restriction", "sql":  "SELECT id, account_id FROM (SELECT 123 AS id, account_id FROM orders) AS a1 WHERE id = 123", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id, account_id FROM (SELECT 123 AS id, account_id FROM orders WHERE id = 123) AS a1 WHERE id = 123", "data": [[123, 123]]}
{"name": "sub_select_access_col_without_prefix", "sql": "SELECT id, col FROM orders CROSS JOIN (SELECT 1 AS col) AS sub_select WHERE id = 123", "errors": ["Column col is not allowed. Column removed from SELECT clause"], "fix": "SELECT id FROM orders CROSS JOIN (SELECT 1 AS col) AS sub_select WHERE id = 123"}
{"name": "cast", "sql": "SELECT id FROM orders WHERE id = 123 AND CAST(product_name AS VARCHAR) = 'product1'", "errors": [], "data": [[123]]}
{"name": "case_when", "sql": "SELECT CASE WHEN id = 123 THEN 111 ELSE FALSE END FROM orders WHERE id = 123", "errors": [], "data": [[111]]}
{"name": "not_allowed_column", "sql": "SELECT id, not_allowed FROM orders WHERE id = 123", "errors": ["Column not_allowed is not allowed. Column removed from SELECT clause"], "fix": "SELECT id FROM orders WHERE id = 123" ,"data": [[123]]}
{"name": "not_allowed_column_brackets_1", "sql": "SELECT (id, not_allowed) FROM orders WHERE id = 123", "errors": ["Column not_allowed is not allowed. Column removed from SELECT clause", "No legal elements in SELECT clause"]}
{"name": "not_allowed_column_brackets_2", "sql": "SELECT (id, not_allowed), product_name FROM orders WHERE id = 123", "errors": ["Column not_allowed is not allowed. Column removed from SELECT clause"], "fix": "SELECT product_name FROM orders WHERE id = 123", "data": [["product1"]]}
{"name": "no_where_clause", "sql": "SELECT id FROM orders", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "no_where_clause_sub_select", "sql": "SELECT id FROM (SELECT id FROM orders)", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM (SELECT id FROM orders WHERE id = 123)", "data": [[123]]}
{"name": "day_function", "sql": "SELECT id FROM orders WHERE id = 123 AND DATE(day) < DATE('now','+14 day')", "errors": [], "data": [[123]]}
{"name": "no_from", "sql": "SELECT 1 AS col", "errors": [], "data": [[1]]}
{"name": "no_from_sub_select", "sql": "SELECT id, sub.col FROM orders CROSS JOIN (SELECT 11 AS col) AS sub WHERE id = 123", "errors": [], "data": [[123, 11]]}
{"name": "no_from_sub_select_lateral", "sql": "SELECT id, sub.col FROM orders CROSS JOIN LATERAL (SELECT 11 AS col) AS sub WHERE id = 123", "errors": []}
{"name": "day_between", "sql": "SELECT id FROM orders WHERE DATE(day) BETWEEN DATE('2000-01-01') AND DATE('now','-1 day') AND id = 123", "errors": [], "data": [[123]]}
{"name": "day_between_static_exp", "sql": "SELECT id FROM orders WHERE DATE('2000-01-01') BETWEEN DATE('2000-01-01') AND DATE('2000-01-01') OR id = 123", "errors": ["Static expression is not allowed: DATE('2000-01-01') BETWEEN DATE('2000-01-01') AND DATE('2000-01-01')"], "fix": "SELECT id FROM orders WHERE id = 123" ,"data": [[123]]}
{"name": "day_in_func", "sql": "SELECT id FROM orders WHERE LOWER(LOWER(LOWER(day))) <> '' AND id = 123", "errors": [], "data": [[123]]}
{"name": "is_null", "sql": "SELECT id FROM orders WHERE day IS NOT NULL AND id = 123", "errors": []}
{"name": "is_null_static_exp", "sql": "SELECT id FROM orders WHERE NULL IS NULL AND id = 123", "errors": ["Static expression is not allowed: NULL IS NULL"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "not_op", "sql": "SELECT id FROM orders WHERE NOT id = 123", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE (NOT id = 123) AND id = 123", "data": []}
{"name": "delete_op", "sql": "DELETE FROM orders", "errors": ["DELETE statement is not allowed"]}
{"name": "drop_op", "sql": "DROP orders", "errors": ["DROP statement is not allowed"]}
{"name": "json_object", "sql": "SELECT json_object('id', id) FROM orders WHERE id = 123", "data": [["{\"id\":123}"]]}
{"name": "json_object_with_illegal_col", "sql": "SELECT json_object('id', id, 'status', status) FROM orders WHERE id = 123", "errors": ["Column status is not allowed. Column removed from SELECT clause",  "No legal elements in SELECT clause"]}
{"name": "json_object_with_illegal_col_fix", "sql": "SELECT id, json_object('id', id, 'status', status) FROM orders WHERE id = 123", "errors": ["Column status is not allowed. Column removed from SELECT clause"], "fix": "SELECT id FROM orders WHERE id = 123", "data": [[123]]}
{"name": "union_all", "sql": "SELECT id FROM orders WHERE id = 123 UNION ALL SELECT id FROM orders WHERE id = 123", "errors": [], "data": [[123], [123]]}
{"name": "union_all_3_parts", "sql": "SELECT id FROM orders WHERE id = 123 UNION ALL SELECT id FROM orders WHERE id = 123 UNION ALL SELECT id FROM orders WHERE id = 123", "errors": [], "data": [[123], [123], [123]]}
{"name": "union_all_missing_restriction", "sql": "SELECT id FROM orders WHERE id = 123 UNION ALL SELECT id FROM orders", "errors": ["Missing restriction for table: orders column: id value: 123"], "fix": "SELECT id FROM orders WHERE id = 123 UNION ALL SELECT id FROM orders WHERE id = 123", "data": [[123], [123]]}
{"name": "with_and_json_object", "skip-reason": "Parser replaces comma with colon inside json_object", "sql": "WITH expanded AS (    SELECT id, product_name, account_id, status FROM orders WHERE id = 123) SELECT json_object('id', id, 'status', status) FROM expanded", "errors": ["Column status is not allowed. Column removed from SELECT clause"], "fix": "WITH expanded AS (SELECT id, product_name, account_id FROM orders WHERE id = 123) SELECT JSON_OBJECT('id', id, 'status', status) FROM expanded", "data": [[123]]}
{"name": "test_with_no_table", "sql": "SELECT 1", "data": [[1]]}
{"name": "create_view", "sql": "CREATE VIEW my_orders AS SELECT * FROM orders WHERE account_id = 123", "errors": ["CREATE statement is not allowed"]}
{"name": "self_join", "sql": "SELECT o1.id, o2.id FROM orders AS o1 CROSS JOIN orders AS o2 WHERE o1.id = 123", "data": [[123, 123], [123, 124]]}